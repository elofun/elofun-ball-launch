{"version":3,"sources":["assets\\Scripts\\PeerComponent\\PeerClientManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport PeerDefine, { PeerActionConnect, PeerActionType, PeerPhase, PeerStage } from \"./PeerDefine\";\r\nimport PeerManager, { IDataReceived } from \"./PeerManager\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PeerClientManager extends PeerManager\r\n{\r\n    public static Instance: PeerClientManager = null;\r\n\r\n    public masterSIP: number = 0\r\n    public currentID: number = 0\r\n    public currentMainPlayerID: number = 0\r\n\r\n    private isMainPlayer: boolean = false;\r\n    private isConnected: boolean = false\r\n    private disconnectCB: Function\r\n    private connectedCB: Function\r\n    private reconnectCB: Function\r\n    private clientTimeoutPingPong: any;\r\n    private clientIntervalPing: any;\r\n    onLoad()\r\n    {\r\n        super.onLoad();\r\n        PeerClientManager.Instance = this\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        this.masterSIP = parseInt(urlParams.get('sip')) || 0;\r\n        console.log(\"masterSIP: \" + this.masterSIP)\r\n\r\n        delete this.setConnectedCB;\r\n        delete this.setDisConnectCB;\r\n        delete this.getClients;\r\n    }\r\n\r\n    setClientConnectedCB(cb: Function)\r\n    {\r\n        this.connectedCB = cb\r\n    }\r\n    setClientDisconnectCB(cb: Function)\r\n    {\r\n        this.disconnectCB = cb\r\n    }\r\n    IsConnected()\r\n    {\r\n        return this.isConnected\r\n    }\r\n    IsMainPlayer()\r\n    {\r\n        return this.isMainPlayer\r\n    }\r\n    update(dt)\r\n    {\r\n        super.update(dt);\r\n    }\r\n    init()\r\n    {\r\n        super.init()\r\n        // this.connect()\r\n    }\r\n    connect()\r\n    {\r\n        let interval = setInterval(() =>\r\n        {\r\n            if (this.isInitalized)\r\n            {\r\n                clearInterval(interval)\r\n\r\n                let localMasterSIP = cc.sys.localStorage.getItem(\"masterSIP\")\r\n                if (localMasterSIP && localMasterSIP == this.masterSIP && !this.isConnected)\r\n                {\r\n                    this.reconnect((args) =>\r\n                    {\r\n                        cc.sys.localStorage.setItem(\"localSIP\", this.sip)\r\n\r\n                        switch (args.currentStage)\r\n                        {\r\n                            case PeerStage.PLAYING:\r\n                                //TO DO\r\n                                break;\r\n                            case PeerStage.WAITING:\r\n                                //TO DO\r\n                                break\r\n                        }\r\n\r\n                    })\r\n                    setTimeout(() =>\r\n                    {\r\n                        if (!this.isConnected)\r\n                        {\r\n                            this.disconnectCB && this.disconnectCB()\r\n                            this.clientTimeoutPingPong && clearTimeout(this.clientTimeoutPingPong)\r\n                            this.clientIntervalPing && clearInterval(this.clientIntervalPing)\r\n                            this.isConnected = false\r\n                        }\r\n                    }, PeerDefine.TIMEOUT_RETRY);\r\n                    return;\r\n                }\r\n\r\n                cc.sys.localStorage.setItem(\"localSIP\", this.sip)\r\n                cc.sys.localStorage.setItem(\"masterSIP\", this.masterSIP)\r\n                let connectMessage: IDataReceived = {\r\n                    phase: PeerPhase.CONNECT,\r\n                    action: PeerActionConnect.CONNECTING,\r\n                    customParam: \"\"\r\n                }\r\n                this.sendMessage(connectMessage)\r\n                setTimeout(() =>\r\n                {\r\n                    if (!this.isConnected)\r\n                    {\r\n                        this.disconnectCB && this.disconnectCB()\r\n                        this.clientTimeoutPingPong && clearTimeout(this.clientTimeoutPingPong)\r\n                        this.clientIntervalPing && clearInterval(this.clientIntervalPing)\r\n                        this.isConnected = false\r\n                    }\r\n                }, PeerDefine.TIMEOUT_RETRY);\r\n            }\r\n        }, 1000)\r\n    }\r\n    reconnect(cb: Function = null)\r\n    {\r\n        cc.log(\"reconnect\")\r\n        this.reconnectCB = cb;\r\n        let localSIP = cc.sys.localStorage.getItem(\"localSIP\") | 0\r\n        let connectMessage: IDataReceived = {\r\n            phase: PeerPhase.CONNECT,\r\n            action: PeerActionConnect.CONNECT_RETRY,\r\n            customParam: \"\" + localSIP\r\n        }\r\n        this.sendMessage(connectMessage)\r\n    }\r\n    sendMessage(msg: IDataReceived)\r\n    {\r\n        if (this.masterSIP)\r\n        {\r\n            this.peer.sendTo(this.masterSIP, JSON.stringify(msg))\r\n        }\r\n    }\r\n    onRecievedMessage(msg, client)\r\n    {\r\n        let args = JSON.parse(msg)\r\n        if (args.phase != PeerPhase.CONNECT)\r\n        {\r\n            console.log(msg)\r\n        }\r\n        if (args.phase == PeerPhase.CONNECT)\r\n        {\r\n            switch (args.action)\r\n            {\r\n                case PeerActionConnect.CONNECTED:\r\n                    {\r\n                        this.isMainPlayer = args.customParam == \"mainPlayer\"\r\n                        this.isConnected = true\r\n                        this.currentID = args.currentID;\r\n                        this.currentMainPlayerID = args.currentMainPlayerID;\r\n                        this.connectedCB && this.connectedCB()\r\n                        this.setClientPing();\r\n                        PeerManager.emit(PeerManager.EventSwitchMainPlayer, this.isMainPlayer)\r\n                        break\r\n                    }\r\n                case PeerActionConnect.CONNECT_FAILED:\r\n                    {\r\n                        this.isConnected = false\r\n                        this.disconnectCB && this.disconnectCB()\r\n                        break;\r\n                    }\r\n                case PeerActionConnect.SWITCH_MAINPLAYER:\r\n                    {\r\n                        this.isMainPlayer = this.currentID == args.currentMainPlayerID\r\n                        this.currentMainPlayerID = args.currentMainPlayerID;\r\n                        PeerManager.emit(PeerManager.EventSwitchMainPlayer, this.isMainPlayer)\r\n                        break;\r\n                    }\r\n                case PeerActionConnect.PING_PONG:\r\n                    {\r\n                        this.clientUpdatePingPong()\r\n                        break;\r\n                    }\r\n                case PeerActionConnect.CONNECT_RETRY_SUCCESS:\r\n                    {\r\n                        this.isMainPlayer = args.customParam == \"mainPlayer\"\r\n                        this.isConnected = true\r\n                        this.currentID = args.currentID;\r\n                        this.currentMainPlayerID = args.currentMainPlayerID;\r\n\r\n                        this.reconnectCB && this.reconnectCB(args)\r\n\r\n                        this.reconnectCB = null\r\n                        this.setClientPing();\r\n                        PeerManager.emit(PeerManager.EventSwitchMainPlayer, this.isMainPlayer)\r\n\r\n                        cc.log(\"reconnect success\")\r\n                        break;\r\n                    }\r\n            }\r\n            return;\r\n        }\r\n        PeerManager.emit(PeerManager.EventReceivedMessage, args)\r\n        this.onmessage && this.onmessage(msg);\r\n    }\r\n    setClientPing()\r\n    {\r\n        this.clientIntervalPing = setInterval(() =>\r\n        {\r\n            let pingMsg: IDataReceived = {\r\n                action: PeerActionConnect.PING_PONG,\r\n                phase: PeerPhase.CONNECT,\r\n                customParam: \"Ping\"\r\n            }\r\n            this.sendMessage(pingMsg)\r\n        }, PeerDefine.PING_TIMER);\r\n    }\r\n    clientUpdatePingPong()\r\n    {\r\n        if (this.clientTimeoutPingPong) clearTimeout(this.clientTimeoutPingPong)\r\n        this.clientTimeoutPingPong = setTimeout(() =>\r\n        {\r\n            this.disconnectCB && this.disconnectCB()\r\n            clearTimeout(this.clientTimeoutPingPong)\r\n            clearInterval(this.clientIntervalPing)\r\n            this.isConnected = false\r\n            console.log(\"disconnect\")\r\n        }, PeerDefine.TIMEOUT_DISCONNECT);\r\n    }\r\n}\r\n"]}