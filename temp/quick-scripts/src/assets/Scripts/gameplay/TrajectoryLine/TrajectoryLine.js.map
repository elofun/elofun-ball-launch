{"version":3,"sources":["assets\\Scripts\\gameplay\\TrajectoryLine\\TrajectoryLine.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TrajectoryLine extends cc.Component {\r\n  graphics: cc.Graphics = null;\r\n  protected onEnable(): void {\r\n    this.graphics = this.node.getComponent(cc.Graphics);\r\n  }\r\n  start() {\r\n    // this.node.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseDown, this);\r\n    // this.clearLineOverTime();\r\n  }\r\n  drawLine(start: cc.Vec2, endPoint: cc.Vec2, mag: number) {\r\n    this.graphics.clear();\r\n    this.graphics.strokeColor = cc.Color.ORANGE; // Set line color\r\n    this.graphics.lineWidth = 3; // Set line width\r\n    this.graphics.moveTo(start.x, start.y);\r\n\r\n    let end = endPoint.mul(mag).add(start);\r\n    this.graphics.lineTo(end.x, end.y);\r\n    this.graphics.stroke();\r\n  }\r\n  drawCircle(start: cc.Vec2, endPoint: cc.Vec2, mag: number) {\r\n    let gap = 14;\r\n    let radius = 4;\r\n    this.graphics.lineWidth = 2; // Set line width\r\n    let pointCount = 0;\r\n    let newCurrentPosMag = 0;\r\n    let newCurrentPos: cc.Vec2 = cc.Vec2.ZERO;\r\n    let end = endPoint.normalize().clone();\r\n    let dir = end.clone().normalizeSelf();\r\n\r\n    pointCount = 0;\r\n\r\n    let currentPos = start.clone();\r\n    currentPos.x = start.x + end.normalizeSelf().x;\r\n    currentPos.y = start.y + end.normalizeSelf().y;\r\n    // currentPos.x = start.x + this.offSet * end.normalizeSelf().x;\r\n    // currentPos.y = start.y + this.offSet * end.normalizeSelf().y;\r\n    this.graphics.moveTo(start.x, start.y);\r\n    this.graphics.circle(currentPos.x, currentPos.y, radius);\r\n    while (newCurrentPosMag < mag - 50) {\r\n      newCurrentPosMag = dir\r\n        .clone()\r\n        .mul(pointCount * gap)\r\n        .mag();\r\n      newCurrentPos = dir\r\n        .clone()\r\n        .mul(pointCount * gap)\r\n        .add(currentPos);\r\n      this.graphics.circle(newCurrentPos.x, newCurrentPos.y, radius);\r\n      pointCount++;\r\n    }\r\n    this.graphics.fill();\r\n    this.graphics.stroke();\r\n  }\r\n  update(dt) {}\r\n}\r\n"]}